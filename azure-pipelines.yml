# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '1a7cb7bf-cdd9-4437-a499-0b19e456965c'

  # Web app name
  webAppName: 'FlaskSampleWebApp'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'FlaskSampleWebApp'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.10
  pythonVersion: '3.10'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    # Set the Python version
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    # Create a virtual python environment, activate it.
    # Install pip, dependent packages listed in requirement.tex
    # install pytest (python testing), pytest-azurepipelines (enables native integratn with devops azure) and pytest-cov to create coverage report
    # run pytest
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip3 install setup
        pip3 install -r requirements.txt
        pip3 install pytest pytest-azurepipelines pytest-cov behave
        python3 -m pytest --cov=application --cov-report html tests/ 
        behave --junit --junit-directory bddtestresults

      workingDirectory: $(projectRoot)
      displayName: "Install requirements and run pytest"

    # Create build archive files zip
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    # Store zip archive files on devops azure
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'publish  package'
      artifact: drop

# Deploy application to Azure WebApp
- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy to Azure WebApp
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : FlaskSampleWebApp'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip